     1                                  global myprintf
     2                                  
     3                                  section .bss
     4 00000000 <res 00000080>                  buffer  resb BUF_SIZE
     5                                  
     6                                  section .rodata
     7                                  
     8                                  align 8
     9                                  
    10                                  table:
    11 00000000 [EE00000000000000]              dq def_case      ;'a'
    12 00000008 [C700000000000000]              dq b_op
    13 00000010 [7600000000000000]              dq c_op
    14 00000018 [8100000000000000]              dq d_op
    15 00000020 [EE00000000000000]-             times 'n' - 'e' dq def_case
    16 00000020 <rept>             
    17                                  
    18                                          ;dq def_case      ;'e'
    19                                          ;dq def_case
    20                                          ;dq def_case
    21                                          ;dq def_case
    22                                          ;dq def_case
    23                                          ;dq def_case
    24                                          ;dq def_case
    25                                          ;dq def_case
    26                                          ;dq def_case
    27                                          ;dq def_case      ;'n'
    28                                  
    29 00000068 [AE00000000000000]              dq o_op
    30 00000070 [E000000000000000]              dq p_op
    31 00000078 [EE00000000000000]              dq def_case      ;'q'
    32 00000080 [EE00000000000000]              dq def_case      ;'r'
    33 00000088 [6B00000000000000]              dq s_op
    34 00000090 [EE00000000000000]              dq def_case      ;'t'
    35 00000098 [EE00000000000000]              dq def_case
    36 000000A0 [EE00000000000000]              dq def_case
    37 000000A8 [EE00000000000000]              dq def_case      ;'w'
    38 000000B0 [9500000000000000]              dq x_op
    39 000000B8 [EE00000000000000]              dq def_case      ;'y'
    40 000000C0 [EE00000000000000]              dq def_case      ;'z'
    41 000000C8 [E600000000000000]              dq prc_op
    42 000000D0 [EE00000000000000]              dq def_case
    43                                  
    44                                  
    45                                  section .data
    46 00000000 73656374696F6E2025-             Msg:        db "section %s is for some data %d %%%b", 0x0a
    47 00000009 7320697320666F7220-
    48 00000012 736F6D652064617461-
    49 0000001B 20256420252525620A 
    50                                          MsgLen      equ $ - Msg
    51                                  
    52 00000024 6572726F723A207772-             ErrDef:     db "error: wrong parameter in my_printf func", 0x0a
    53 0000002D 6F6E6720706172616D-
    54 00000036 6574657220696E206D-
    55 0000003F 795F7072696E746620-
    56 00000048 66756E630A         
    57                                          ErrDefLen   equ $ - ErrDef
    58                                  
    59 0000004D AAAAFFFF00000000                var         dq  0xffffaaaa
    60                                  
    61                                          BUF_SIZE    equ 128
    62                                          SYS_WRITE   equ 1
    63                                          STDOUT      equ 1
    64                                  
    65                                  
    66                                  section .text
    67                                  global def_case
    68                                  
    69                                  myprintf:
    70 00000000 58                              pop rax
    71 00000001 4889C7                          mov rdi, rax
    72                                  
    73 00000004 48BE-                           mov rsi, buffer
    74 00000006 [0000000000000000] 
    75                                  
    76                                  .HANDLING:
    77 0000000E 488B07                          mov rax, [rdi]
    78 00000011 E81C000000                      call _switch_ops
    79                                  
    80 00000016 483D5C300000                    cmp rax, '\0'
    81 0000001C 75F0                            jne .HANDLING
    82                                  
    83                                          ;stream buffer using syscall
    84 0000001E E825010000                      call _buffer_stdout
    85                                  
    86 00000023 48B83C000000000000-             mov rax, 0x3C       ;END OF PROGRAM
    87 0000002C 00                 
    88 0000002D 4831FF                          xor rdi, rdi
    89 00000030 0F05                            syscall
    90                                  
    91                                  _switch_ops:
    92 00000032 483D25000000                    cmp rax, '%'
    93 00000038 0F85B0000000                    jne def_case
    94                                  
    95                                  .OP_CHECK:
    96 0000003E 48FFC7                          inc rdi
    97 00000041 488B07                          mov rax, [rdi]
    98 00000044 48FFC7                          inc rdi
    99                                  
   100 00000047 483D25000000                    cmp rax, '%'
   101 0000004D 0F8493000000                    je prc_op
   102                                  
   103 00000053 482D61000000                    sub rax, 'a'
   104                                  
   105 00000059 488B04C5[00000000]              mov rax, [table + rax * 8]
   106 00000061 FFE0                            jmp rax
   107                                  
   108 00000063 48FFCF                          dec rdi
   109 00000066 E983000000                      jmp def_case
   110                                  
   111                                  s_op:
   112 0000006B 58                              pop rax
   113                                  
   114                                          ;put string to bufer
   115 0000006C E8B6000000                      call _str_to_buf
   116                                  
   117 00000071 E978000000                      jmp def_case
   118                                  c_op:
   119 00000076 58                              pop rax
   120                                  
   121                                          ;put char to the bufer
   122 00000077 E89F000000                      call _char_to_buf
   123                                  
   124 0000007C E96D000000                      jmp def_case
   125                                  d_op:
   126 00000081 6804000000                      push 4          ;nums_quantity
   127 00000086 680A000000                      push 10         ;radix
   128                                  
   129 0000008B E879000000                      call _dec_to_buf
   130                                  
   131 00000090 E959000000                      jmp def_case
   132                                  x_op:
   133 00000095 6804000000                      push 4          ;nums_quantity
   134 0000009A 6804000000                      push 4          ;slip
   135 0000009F 680F000000                      push 1111b      ;mask for 1 digit
   136                                  
   137 000000A4 E849000000                      call _binfit_to_buf
   138                                  
   139 000000A9 E940000000                      jmp def_case
   140                                  o_op:
   141 000000AE 6804000000                      push 4          ;nums_quantity
   142 000000B3 6803000000                      push 3          ;slip
   143 000000B8 6807000000                      push 111b       ;mask for 1 digit
   144                                  
   145 000000BD E830000000                      call _binfit_to_buf
   146                                  
   147 000000C2 E927000000                      jmp def_case
   148                                  b_op:
   149 000000C7 6808000000                      push 8          ;nums_quantity
   150 000000CC 6801000000                      push 1          ;slip
   151 000000D1 6801000000                      push 1b         ;mask for 1 digit
   152                                  
   153 000000D6 E817000000                      call _binfit_to_buf
   154                                                  ;(buffer addr in rsi)
   155 000000DB E90E000000                      jmp def_case
   156                                  p_op:
   157 000000E0 58                              pop rax
   158                                          ;get ptr translation
   159 000000E1 E908000000                      jmp def_case
   160                                  prc_op:
   161 000000E6 488906                          mov [rsi], rax
   162 000000E9 E900000000                      jmp def_case
   163                                  def_case:
   164 000000EE 668906                          mov [rsi], ax
   165                                          ;skip   ;push rdi
   166                                                  ;push rsi
   167                                  
   168                                                  ;mov rax, 0x01
   169                                                  ;mov rdi, 1
   170                                                  ;mov rsi, ErrDef
   171                                                  ;mov rdx, ErrDefLen
   172                                                  ;syscall
   173                                  
   174                                                  ;pop rsi
   175                                                  ;pop rdi
   176                                  
   177 000000F1 C3                              ret
   178                                  
   179                                  _binfit_to_buf:
   180 000000F2 5A                              pop rdx             ;mask for 1 digit
   181 000000F3 5B                              pop rbx             ;slip
   182 000000F4 59                              pop rcx             ;nums quantity
   183 000000F5 58                              pop rax             ;number
   184                                          ;push rcx
   185                                          ;mov rcx, 4         ;for %b - 8 ; %d - ? ; %o - 5
   186                                  
   187                                  .LOOP_X:
   188 000000F6 50                              push rax
   189 000000F7 4821D0                          and rax, rdx
   190                                  
   191 000000FA 668906                          mov [rsi], ax
   192 000000FD 48FFC6                          inc rsi
   193                                  
   194 00000100 58                              pop rax
   195 00000101 88D9                            mov cl, bl
   196 00000103 48D3E8                          shr rax, cl        ;for %b - 1 ; %d - ? ; %o - 3
   197 00000106 E2EE                            loop .LOOP_X
   198                                  
   199 00000108 C3                              ret
   200                                  
   201                                  _dec_to_buf:
   202 00000109 5B                              pop rbx             ;radix
   203 0000010A 59                              pop rcx             ;nums quantity
   204 0000010B 58                              pop rax
   205                                  
   206                                  .LOOP_D:
   207 0000010C 48F7F3                          div rbx             ; rax <- quotient & rbx <- reminder
   208                                  
   209 0000010F 66891E                          mov [rsi], bx
   210 00000112 48FFC6                          inc rsi
   211                                  
   212 00000115 4885C0                          test rax, rax
   213 00000118 75F2                            jnz .LOOP_D
   214                                  
   215 0000011A C3                              ret
   216                                  
   217                                  _char_to_buf:
   218 0000011B 4825FF000000                    and rax, 11111111b
   219                                  
   220 00000121 8906                            mov [rsi], eax
   221 00000123 48FFC6                          inc rsi
   222                                  
   223 00000126 C3                              ret
   224                                  
   225                                  _str_to_buf:
   226 00000127 57                              push rdi
   227 00000128 4889C7                          mov rdi, rax
   228                                  
   229                                  .STR_OUT:
   230 0000012B 66813F5C30                      cmp word [rdi], '\0'
   231 00000130 7411                            je .END_STR_OUT
   232                                  
   233 00000132 668B07                          mov ax, [rdi]
   234 00000135 668906                          mov [rsi], ax
   235 00000138 48FFC6                          inc rsi
   236 0000013B 48FFC7                          inc rdi
   237                                  
   238 0000013E E9E8FFFFFF                      jmp .STR_OUT
   239                                  
   240                                  .END_STR_OUT:
   241 00000143 58                              pop rax
   242 00000144 4889C7                          mov rdi, rax
   243 00000147 C3                              ret
   244                                  
   245                                  _buffer_stdout:
   246                                          ;string from buffer to console
   247 00000148 48B801000000000000-             mov rax, SYS_WRITE
   248 00000151 00                 
   249 00000152 48BF01000000000000-             mov rdi, STDOUT
   250 0000015B 00                 
   251 0000015C 48BE-                           mov rsi, buffer
   252 0000015E [0000000000000000] 
   253 00000166 48BA80000000000000-             mov rdx, BUF_SIZE
   254 0000016F 00                 
   255 00000170 0F05                            syscall
   256                                  
   257                                          ;clear buffer
   258 00000172 48BF-                           mov rdi, buffer
   259 00000174 [0000000000000000] 
   260 0000017C 48B980000000000000-             mov rcx, 128
   261 00000185 00                 
   262 00000186 4831C0                          xor rax, rax
   263 00000189 F3AA                            rep stosb
   264                                  
   265 0000018B C3                              ret
